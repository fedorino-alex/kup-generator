name: Release & Build Docker Image

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '.github/**'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install semantic-release
      run: npm install -g semantic-release @semantic-release/commit-analyzer @semantic-release/release-notes-generator conventional-changelog-conventionalcommits
    
    - name: 🔍 Calculate next version
      id: version
      run: |
        # Create minimal config for version calculation only
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main", "master"],
          "tagFormat": "${version}",
          "plugins": [
            [
              "@semantic-release/commit-analyzer",
              {
                "preset": "conventionalcommits",
                "releaseRules": [
                  { "type": "feat", "release": "minor" },
                  { "type": "fix", "release": "patch" },
                  { "type": "perf", "release": "patch" },
                  { "type": "revert", "release": "patch" },
                  { "type": "docs", "release": "patch" },
                  { "type": "refactor", "release": "patch" },
                  { "type": "build", "release": "patch" },
                  { "type": "style", "release": false },
                  { "type": "chore", "release": false },
                  { "type": "test", "release": false },
                  { "type": "ci", "release": false },
                  { "scope": "BREAKING", "release": "major" }
                ]
              }
            ],
            ["@semantic-release/release-notes-generator"]
          ],
          "dryRun": false
        }
        EOF
        
        echo "🔍 Analyzing commits for version calculation..."
        
        # Run semantic-release to get the next version
        npx semantic-release --dry-run --no-ci > release-output.txt 2>&1 || true
        
        # Extract version from output
        NEXT_VERSION=""
        if grep -q "The next release version is" release-output.txt; then
          NEXT_VERSION=$(grep "The next release version is" release-output.txt | sed 's/.*The next release version is //' | head -1)
        fi
        
        if [ -z "$NEXT_VERSION" ]; then
          echo "� No release needed - only non-releasing commits found"
          echo "release_needed=false" >> $GITHUB_OUTPUT
        else
          echo "🚀 Next version will be: $NEXT_VERSION"
          echo "release_needed=true" >> $GITHUB_OUTPUT
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        fi
        
        echo "📋 Semantic Release Analysis:"
        cat release-output.txt
    
    - name: 🏷️ Create Git tag
      if: steps.version.outputs.release_needed == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        echo "🏷️ Creating tag: $VERSION"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create tag locally (don't push yet)
        git tag -a "$VERSION" -m "Release $VERSION"
        
        echo "✅ Tag $VERSION created locally"
    - name: 🔑 Log in to Docker Hub
      if: steps.version.outputs.release_needed == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: 🐳 Build the Docker image
      if: steps.version.outputs.release_needed == 'true'
      run: |
        echo "🔨 Building Docker image: fedorinoalex/kup-generator:${{ steps.version.outputs.version }}"
        docker build . --file Dockerfile --tag fedorinoalex/kup-generator:${{ steps.version.outputs.version }}
    - name: 📤 Push the Docker image
      if: steps.version.outputs.release_needed == 'true'
      run: |
        echo "⬆️ Pushing version tag: ${{ steps.version.outputs.version }}"
        docker push fedorinoalex/kup-generator:${{ steps.version.outputs.version }}
    - name: 🏷️ Tag image as latest
      if: steps.version.outputs.release_needed == 'true'
      run: |
        echo "🔗 Tagging as latest..."
        docker tag fedorinoalex/kup-generator:${{ steps.version.outputs.version }} fedorinoalex/kup-generator:latest
    - name: 📤 Push latest tag
      if: steps.version.outputs.release_needed == 'true'
      run: |
        echo "⬆️ Pushing latest tag..."
        docker push fedorinoalex/kup-generator:latest
    - name: 📝 Generate changelog for release
      if: steps.version.outputs.release_needed == 'true'
      shell: bash
      run: |
        echo "📋 Generating changelog for release..."
        
        # Get the current version
        VERSION="${{ steps.version.outputs.version }}"
        
        # Get the previous tag (excluding the current one if it exists)
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "^${VERSION}$" | head -n1 2>/dev/null || echo "")
        
        echo "🔍 Current version: $VERSION"
        echo "🔍 Previous tag: $PREV_TAG"
        
        if [ -z "$PREV_TAG" ]; then
          # If no previous tag, get recent commits
          echo "📜 No previous tag found, getting recent commits..."
          COMMITS=$(git log --pretty=format:"%s (%h)" --no-merges -10)
        else
          # Get commits since previous tag
          echo "📜 Getting commits since $PREV_TAG..."
          COMMITS=$(git log --pretty=format:"%s (%h)" --no-merges ${PREV_TAG}..HEAD)
        fi
        
        echo "📋 Raw commits found:"
        echo "$COMMITS"
        
        # Format changelog with proper markdown
        CHANGELOG=""
        if [ -n "$COMMITS" ]; then
          while IFS= read -r commit; do
            if [ -n "$commit" ]; then
              # Clean up commit message and format as markdown list item
              clean_commit=$(echo "$commit" | sed 's/["\`]//g' | sed "s/'/'/g")
              CHANGELOG="${CHANGELOG}- ${clean_commit}"$'\n'
            fi
          done <<< "$COMMITS"
        fi
        
        # If still empty, add fallback
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Minor improvements and bug fixes"$'\n'
        fi
        
        echo "📝 Final changelog:"
        echo "$CHANGELOG"
        
        # Save to file to avoid environment variable issues
        echo "$CHANGELOG" > changelog.txt
        echo "✅ Changelog generated and saved to file"
      id: generate_changelog
    
    - name: 🏷️ Push Git tag
      if: steps.version.outputs.release_needed == 'true'
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "🚀 Pushing tag: $VERSION"
        git push origin "$VERSION"
        echo "✅ Tag $VERSION pushed successfully!"
    
    - name: 🚀 Create GitHub Release
      if: steps.version.outputs.release_needed == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const fs = require('fs');
          
          console.log(`🚀 Creating GitHub release for version ${version}...`);
          
          // Read changelog from file
          let changelogContent = '';
          try {
            changelogContent = fs.readFileSync('changelog.txt', 'utf8').trim();
            console.log('📄 Changelog file content:', changelogContent);
          } catch (error) {
            console.log('⚠️ Could not read changelog file:', error.message);
            changelogContent = '- Minor improvements and bug fixes';
          }
          
          if (!changelogContent) {
            console.log('⚠️ Changelog content is empty, using fallback');
            changelogContent = '- Minor improvements and bug fixes';
          }
          
          const releaseBody = `## What's Changed
          
          ${changelogContent}
          
          ## 🐳 Docker Images
          
          You can pull the Docker image for this release:
          \`\`\`bash
          docker pull fedorinoalex/kup-generator:${version}
          docker pull fedorinoalex/kup-generator:latest
          \`\`\`
          
          ### Available Tags:
          - \`fedorinoalex/kup-generator:${version}\` - This specific version
          - \`fedorinoalex/kup-generator:latest\` - Always points to the latest release
          
          ### Usage:
          \`\`\`bash
          docker run --rm -v ./out:/app/out fedorinoalex/kup-generator:${version}
          \`\`\``;
          
          console.log('📋 Release body preview:');
          console.log(releaseBody);
          
          // Create the release
          const { data: release } = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: version,
            name: `🚀 Release ${version}`,
            body: releaseBody,
            draft: false,
            prerelease: false
          });
          
          console.log(`✅ Created release: ${release.html_url}`);
